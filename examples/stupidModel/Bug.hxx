
#ifndef __Bug_hxx__
#define __Bug_hxx__

#include <Agent.hxx>
#include <Action.hxx>

#include <string>

#include <list>
#include <vector>
#include <queue>
#include <map>

namespace Examples 
{

class Bug : public Engine::Agent
{
	
	int _size; // MpiBasicAttribute: attribute that represents the size of the Bug agent
	int _maxBugMovement; // MpiBasicAttribute: attribute that represents the maximum movement distance for the agent
	int _maxConsumptionRate; // MpiBasicAttribute: attribute that represents the maximum conspumtion of food of a Bug agent in one step
	int _survivalProbability; // MpiBasicAttribute: attribute that represents the probability of a Bug agent to survive a sudden death

	std::vector< float > _hey1;					// MpiComplexAttribute
	std::queue<bool > _hey2;					// MpiComplexAttribute
	std::map<int, Engine::Point2D<int>> _hey3; 	// MpiComplexAttribute

public:
	
	// creates a Bug agent with his attributes inicialized with the in values
	Bug(const std::string & id, const int& maxMovement, const int &maxConsumptionRate, const int& survivalProbability, const int &size);
	// destroys a Bug agent
	virtual ~Bug();
	
	// selects wich actions and in wich order each Bug agent
	void selectActions();
	// selects wich attributes of the simulation are registered
	void registerAttributes();
	// gives value to the registered attributes
	void serialize();
	void updateState( );
	void updateKnowledge( );

	// setter of the _size attribute
	void setSize(const int &size);
	// getter of the _size attribute
	int getSize() const;
	// getter for the _maxBugMovement attribute
	int getMaxMovement() const;
	// getter of the _maxConsumptionRate attribute
	int getMaxConsumptionRate() const;
	// getter of the _survivalProbability attribute
	int getSurvivalProbability() const;
	// method that generates a new Bug agent (a child)
	void reproduce(const std::string &childId);


	///// Autogenerated code (do not modify): /////
public:
	Bug( void * );
	void* fillPackage() const override;
	void freePackage(void* package) const override;
	bool hasTheSameAttributes(const Engine::Agent& other) const override;
	void sendVectorAttributes(int);
	void receiveVectorAttributes(int);
	void* createComplexAttributesDeltaPackage(int& sizeOfPackage) const override;
	void copyContinuousValuesToDiscreteOnes() override;
	///////// End of autogenerated code ///////////


	///// Autogenerated code (do not modify): /////
private:
	int _discrete_size;
	int _discrete_survivalProbability;
	int _discrete_maxBugMovement;
	int _discrete_maxConsumptionRate;

	std::vector<float> _discrete_hey1;
	std::queue<bool> _discrete_hey2;
	std::map<int,Engine::Point2D<int>> _discrete_hey3;
	///////// End of autogenerated code ///////////


	///// Autogenerated code (do not modify): /////
private:
	std::vector<std::tuple<int, int, float>> _deltaFor_hey1;			// <typeOfModification, elementIndex, elementNewValue>
	std::vector<std::tuple<int, bool>> _deltaFor_hey2;			// <typeOfModification, elementNewValue>
	std::vector<std::tuple<int, int, Engine::Point2D<int>>> _deltaFor_hey3;			// <typeOfModification, elementKey, elementValue>

	void insertElementAtIndex_hey1(const float& element, const int& index);
	void updateElementAtIndex_hey1(const float& element, const int& index);
	void deleteElementAtIndex_hey1(const int& index);
	void pushElement_hey2(const bool& element);
	void popElement_hey2();
	void insertOrUpdateElement_hey3(const int& key, const Engine::Point2D<int>& value);
	void deleteElement_hey3(const int& key);
	///////// End of autogenerated code ///////////

};

} // namespace Examples

#endif 

